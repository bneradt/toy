#!/usr/bin/env python3

"""Counts the size of directories."""

import argparse
import os
import sys
from typing import List, Optional, Set

class Directory:
    """Represents a directory in a file system."""

    def __init__(self, name: str, parent: Optional['Directory'] = None):
        """Initializes a directory with a name and a parent directory.

        :param name: The name of the directory.
        :param parent: The parent directory.

        :raises ValueError: If the parent directory already has a child directory with the given name.
        """
        self._name: str = name
        self._parent: Optional[Directory] = parent
        self._child_directories: List[Directory] = []
        self._child_files: List[File] = []

        if self._parent is not None:
            if self._parent.has_child_directory_with_name(name):
                raise ValueError(f'The directory already has a child directory with the name "{name}".')
            self._parent._child_directories.append(self)
    
    def __str__(self) -> str:
        """Returns a string representation of the directory."""
        return self._name
    
    def __repr__(self) -> str:
        """Returns a string representation of the directory."""

        absolute_path: str = self._name
        directory: Optional[Directory] = self._parent
        while directory is not None:
            absolute_path = os.path.join(directory._name, absolute_path)
            directory = directory._parent
        return absolute_path
    
    def get_size(self) -> int:
        """Returns the size of the directory.

        :return: The size of the directory.

        >>> root = Directory('/')
        >>> root.get_size()
        0
        >>> root.add_file_by_name('file1', 10)
        /file1
        >>> root.get_size()
        10
        >>> root.add_file_by_name('file2', 20)
        /file2
        >>> root.get_size()
        30
        >>> dir1 = root.add_directory_by_name('dir1')
        >>> root.get_size()
        30
        >>> dir1.add_file_by_name('file3', 30)
        /dir1/file3
        >>> dir1.get_size()
        30
        >>> root.get_size()
        60
        """
        size: int = 0
        for file in self._child_files:
            size += file.get_size()
        for directory in self._child_directories:
            size += directory.get_size()
        return size
    
    def get_parent(self) -> 'Directory':
        """Returns the parent directory.

        :return: The parent directory or self if the directory is the root directory.

        >>> root = Directory('/')
        >>> root.get_parent() is root
        True
        >>> dir1 = Directory('dir1', root)
        >>> dir1.get_parent() is root
        True
        >>> dir2 = Directory('dir2', dir1)
        >>> dir2.get_parent() is dir1
        True
        """
        return self._parent if self._parent is not None else self
    
    def get_child_directory(self, name: str) -> 'Directory':
        """Returns the child directory with the given name.

        :param name: The name of the child directory.
        :return: The child directory.
        :raises ValueError: If the directory does not have a child directory with the given name.

        >>> root = Directory('/')
        >>> root.get_child_directory('dir1')
        Traceback (most recent call last):
        ...
        ValueError: The directory does not have a child directory with the name "dir1".
        >>> dir1 = Directory('dir1', root)
        >>> root.get_child_directory('dir1') is dir1
        True
        """
        for child_directory in self._child_directories:
            if child_directory._name == name:
                return child_directory
        raise ValueError(f'The directory does not have a child directory with the name "{name}".')
    
    def is_root(self) -> bool:
        """Returns whether the directory is the root directory.

        :return: Whether the directory is the root directory.

        >>> root = Directory('/')
        >>> root.is_root()
        True
        >>> dir1 = Directory('dir1', root)
        >>> dir1.is_root()
        False
        """
        return self._parent is None
    
    def has_child_directory_with_name(self, directory: str) -> bool:
        """Returns whether the directory has a child directory with the given name.

        :param directory: The name of the directory to check.
        :return: Whether the directory has a child directory with the given name.

        >>> root = Directory('/')
        >>> root.has_child_directory_with_name('dir1')
        False
        >>> dir1 = Directory('dir1', root)
        >>> root.has_child_directory_with_name('dir1')
        True
        """
        for child_directory in self._child_directories:
            if child_directory._name == directory:
                return True
        return False
    
    def has_child_file_with_name(self, file: str) -> bool:
        """Returns whether the directory has a child file with the given name.

        :param file: The name of the file to check.
        :return: Whether the directory has a child file with the given name.

        >>> root = Directory('/')
        >>> root.has_child_file_with_name('file1')
        False
        >>> file1 = File('file1', 10, root)
        >>> root.has_child_file_with_name('file1')
        True
        """
        for child_file in self._child_files:
            if child_file._name == file:
                return True
        return False
    
    def add_directory_by_name(self, name: str) -> 'Directory':
        """Adds a child directory with the given name to the directory.

        :param name: The name of the directory to add.
        :return: The added directory.
        :raises ValueError: If the directory already has a child directory with the given name.

        >>> root = Directory('/')
        >>> root.add_directory_by_name('dir1')
        /dir1
        >>> root.has_child_directory_with_name('dir1')
        True
        >>> root.add_directory_by_name('dir1')
        Traceback (most recent call last):
        ...
        ValueError: The directory already has a child directory with the name "dir1".
        """
        if self.has_child_directory_with_name(name):
            raise ValueError(f'The directory already has a child directory with the name "{name}".')
        directory: Directory = Directory(name, self)
        # The constructor of Directory adds itself to self._child_directories.
        return directory
    
    def add_file_by_name(self, name: str, size: int) -> 'File':
        """Adds a child file with the given name to the directory.

        :param name: The name of the file to add.
        :param size: The size of the file to add.
        :return: The added file.
        :raises ValueError: If the directory already has a child file with the given name.

        >>> root = Directory('/')
        >>> root.add_file_by_name('file1', 0)
        /file1
        >>> root.has_child_file_with_name('file1')
        True
        >>> root.add_file_by_name('file1', 100)
        Traceback (most recent call last):
        ...
        ValueError: The directory already has a child file with the name "file1".
        """
        if self.has_child_file_with_name(name):
            raise ValueError(f'The directory already has a child file with the name "{name}".')
        file: File = File(name, size, self)
        # The File constructor will add itself to the directory's list of child files.
        return file
    
    def count_sizes_of_directories(self, max_dir_size: int) -> int:
        """Counts the size of directories with a size less than or equal to the given size.

        :param max_dir_size: The maximum size of a directory to count. A value of -1 means that
            all directories should be counted.
        :return: The sum of the sizes of all directories with a size less than
        or equal @a max_dir_size.

        >>> root = Directory('/')
        >>> root.count_sizes_of_directories(100)
        0
        >>> dir1 = Directory('dir1', root)
        >>> root.count_sizes_of_directories(100)
        0
        >>> dir1.add_file_by_name('file1', 10)
        /dir1/file1
        >>> dir1.count_sizes_of_directories(100)
        10
        >>> root.count_sizes_of_directories(100)
        10
        >>> dir1.add_file_by_name('file2', 200)
        /dir1/file2
        >>> root.count_sizes_of_directories(100)
        0
        >>> dir2 = Directory('dir2', dir1)
        >>> dir2.add_file_by_name('file3', 10)
        /dir1/dir2/file3
        >>> dir2.count_sizes_of_directories(100)
        10
        >>> dir1.count_sizes_of_directories(100)
        10
        >>> root.count_sizes_of_directories(100)
        10
        >>> root.count_sizes_of_directories(-1)
        220
        """
        direct_file_size: int = sum(child_file._size for child_file in self._child_files)
        
        child_directory_size: int = 0
        for child_directory in self._child_directories:
            child_directory_size += child_directory.count_sizes_of_directories(max_dir_size)
        
        if max_dir_size == -1 or (direct_file_size + child_directory_size <= max_dir_size):
            return direct_file_size + child_directory_size
        else:
            return child_directory_size
    
    def get_all_leaf_files(self) -> List['File']:
        """Returns a list of all files of this directory or any of its descendants.

        :return: A list of all files of this directory or any of its descendants.

        >>> root = Directory('/')
        >>> root.get_all_leaf_files()
        []
        >>> file1 = File('file1', 10, root)
        >>> root.get_all_leaf_files()
        [/file1]
        >>> dir1 = Directory('dir1', root)
        >>> root.get_all_leaf_files()
        [/file1]
        >>> dir1.add_file_by_name('file2', 10)
        /dir1/file2
        >>> root.get_all_leaf_files()
        [/file1, /dir1/file2]
        """
        files: Set[Directory] = set(self._child_files)
        for child_directory in self._child_directories:
            files = files.union(child_directory.get_all_leaf_files())
        return list(files)

    def count_all_leaf_file_sizes(self) -> int:
        """Count and sum the sizes of all leaf files.

        :return: The sum of the sizes of all leaf files.

        >>> root = Directory('/')
        >>> root.count_all_leaf_file_sizes()
        0
        >>> file1 = File('file1', 10, root)
        >>> root.count_all_leaf_file_sizes()
        10
        >>> dir1 = Directory('dir1', root)
        >>> root.count_all_leaf_file_sizes()
        10
        >>> dir1.add_file_by_name('file2', 10)
        /dir1/file2
        >>> root.count_all_leaf_file_sizes()
        20
        """
        all_files = self.get_all_leaf_files()
        return sum(file._size for file in all_files)

    def get_all_ancestor_directories(self) -> List['Directory']:
        """Returns a list of all ancestor directories of this directory.

        :return: A list of all ancestor directories of this directory.

        >>> root = Directory('/')
        >>> root.get_all_ancestor_directories()
        []
        >>> dir1 = Directory('dir1', root)
        >>> dir1.get_all_ancestor_directories()
        []
        >>> dir2 = Directory('dir2', dir1)
        >>> dir2.get_all_ancestor_directories()
        []
        >>> dir1.get_all_ancestor_directories()
        [/dir1/dir2]
        >>> root.get_all_ancestor_directories()
        [/dir1/dir2, /dir1]
        """
        ancestor_directories: Set[Directory] = set(self._child_directories)
        for child_directory in self._child_directories:
            ancestor_directories = ancestor_directories.union(child_directory.get_all_ancestor_directories())
        return list(ancestor_directories)

    def count_with_double_counting(self, max_dir_size: int) -> int:
        """Counts the size of directories with a size less than or equal to the given size.

        :param max_dir_size: The maximum size of a directory to count. A value of -1 means that
            all directories should be counted.

        :return: The sum of the sizes of all directories with a size less than
        or equal @a max_dir_size.

        >>> root = Directory('/')
        >>> root.count_with_double_counting(100)
        0
        >>> dir1 = Directory('dir1', root)
        >>> root.count_with_double_counting(100)
        0
        >>> dir1.add_file_by_name('file1', 10)
        /dir1/file1
        >>> dir1.count_with_double_counting(100)
        10
        >>> root.count_with_double_counting(100)
        20
        """
        ret = 0
        my_size = self.count_all_leaf_file_sizes()
        if max_dir_size == -1 or (my_size <= max_dir_size):
            ret += my_size
        all_ancestors = self.get_all_ancestor_directories()
        for ancestor in all_ancestors:
            ancestor_size = ancestor.count_all_leaf_file_sizes()
            if max_dir_size == -1 or ancestor_size <= max_dir_size:
                ret += ancestor_size
        return ret


class File:
    """Represents a file in a file system."""

    def __init__(self, name: str, size: int, parent: 'Directory'):
        """Initializes a file with a name and a parent directory.

        :param name: The name of the file.
        :param size: The size of the file.
        :param parent: The parent directory.

        :raises ValueError: If the size is negative.
        """

        if size < 0:
            raise ValueError('The size of a file cannot be negative.')

        self._name: str = name
        self._size: int = size
        self._parent: Directory = parent
        self._parent._child_files.append(self)
    
    def __str__(self) -> str:
        """Returns a string representation of the file."""
        return self._name
    
    def __repr__(self) -> str:
        """Returns a string representation of the file."""

        absolute_path: str = self._name
        directory: Optional[Directory] = self._parent
        while directory is not None:
            absolute_path = os.path.join(directory._name, absolute_path)
            directory = directory._parent
        return absolute_path
    
    def get_size(self) -> int:
        """Returns the size of the file.

        :return: The size of the file.

        >>> root = Directory('/')
        >>> file = File('file', 10, root)
        >>> file.get_size()
        10
        """
        return self._size


def parse_args() -> argparse.Namespace:
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        '-m', '--max-dir-size',
        type=int,
        default=-1,
        help='The maximum size of a directory to include in the sum. A value of -1 means that all '
                'directories should be included.'
    )

    parser.add_argument(
        'input',
        type=argparse.FileType('r'),
        default=sys.stdin,
        help='The input file with terminal output.'
    )

    return parser.parse_args()


def parse_terminal_output(lines: List[str]) -> Directory:
    """Parse the terminal output to get the file system.

    :param lines: The lines of the terminal output.
    :return: The root directory of the file system.
    :raises ValueError: If the terminal output is invalid.

    >>> root = parse_terminal_output([
    ...     '$ cd /',
    ...     '$ ls',
    ...     'dir a',
    ...     '10 file1',
    ...     '20 file2',
    ...     '$ cd a',
    ...     '$ ls',
    ...     'dir b',
    ...     '30 file3'])
    >>> root.get_size()
    60
    """

    root: Directory = Directory('/')
    current_directory: Directory = root
    
    is_parsing_ls: bool = False
    line_number: int = 0
    for line in lines:
        line_number += 1
        if line.startswith('$ '):
            is_parsing_ls = False
            command = line[2:].strip()
            if command.startswith('cd'):
                destination = command[3:].strip()
                if destination == '/':
                    current_directory = root
                elif destination == '..':
                    current_directory = current_directory.get_parent()
                else:
                    if current_directory.has_child_directory_with_name(destination):
                        current_directory = current_directory.get_child_directory(destination)
                    else:
                        current_directory = current_directory.add_directory_by_name(destination)
            elif command == 'ls':
                is_parsing_ls = True
            else:
                raise ValueError(f'Unknown command at line {line_number}: {command}:\n{line}')
        else:
            if not is_parsing_ls:
                raise ValueError(f'Non-command line when not parsing ls output at line {line_number}:\n{line}')
            split_line = line.split()
            if len(split_line) != 2:
                raise ValueError(f'Invalid number of words in ls output at line {line_number}:\n{line}')
            first_word = split_line[0]
            if first_word == "dir":
                dir_name = split_line[1]
                if not current_directory.has_child_directory_with_name(dir_name):
                    current_directory.add_directory_by_name(dir_name)
            else:
                try:
                    file_size = int(first_word)
                except ValueError:
                    raise ValueError(f'Invalid file size at line {line_number}:\n{line}')
                file_name = split_line[1]
                current_directory.add_file_by_name(file_name, file_size)
                

    return root


def main() -> int:
    """Run the program."""
    args = parse_args()

    root = parse_terminal_output(args.input.readlines())
    size = root.count_with_double_counting(args.max_dir_size)
    print(size)

    return 0


if __name__ == '__main__':
    import doctest
    doctest.testmod()
    sys.exit(main())