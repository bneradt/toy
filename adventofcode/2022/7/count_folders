#!/usr/bin/env python3

"""Counts the size of directories."""

import argparse
import os
import sys
from typing import List, Optional

class Directory:
    """Represents a directory in a file system."""

    def __init__(self, name: str, parent: Optional['Directory'] = None):
        """Initializes a directory with a name and a parent directory.

        :param name: The name of the directory.
        :param parent: The parent directory.

        :raises ValueError: If the parent directory already has a child directory with the given name.
        """
        self._name: str = name
        self._parent: Optional[Directory] = parent
        self._child_directories: List[Directory] = []
        self._child_files: List[File] = []

        if self._parent is not None:
            if self._parent.has_child_directory_with_name(name):
                raise ValueError(f'The directory already has a child directory with the name "{name}".')
            self._parent._child_directories.append(self)
    
    def __str__(self) -> str:
        """Returns a string representation of the directory."""
        return self._name
    
    def __repr__(self) -> str:
        """Returns a string representation of the directory."""

        absolute_path: str = self._name
        directory: Optional[Directory] = self._parent
        while directory is not None:
            absolute_path = os.path.join(directory._name, absolute_path)
            directory = directory._parent
        return absolute_path
    
    def add_directory(self, directory: 'Directory') -> None:
        """Adds a directory to the current directory.

        :param directory: The directory to add.
        """
        self._child_directories.append(directory)
    
    def add_file(self, file: 'File') -> None:
        """Adds a file to the current directory.

        :param file: The file to add.
        """
        self._child_files.append(file)
    
    def get_size(self) -> int:
        """Returns the size of the directory.

        :return: The size of the directory.

        >>> root = Directory('/')
        >>> root.get_size()
        0
        >>> root.add_file(File('file1', 10, root))
        >>> root.get_size()
        10
        >>> root.add_file(File('file2', 20, root))
        >>> root.get_size()
        30
        >>> dir1 = Directory('dir1')
        >>> root.add_directory(dir1)
        >>> root.get_size()
        30
        >>> dir1.add_file(File('file3', 30, dir1))
        >>> dir1.get_size()
        30
        >>> root.get_size()
        60
        """
        size: int = 0
        for file in self._child_files:
            size += file.get_size()
        for directory in self._child_directories:
            size += directory.get_size()
        return size
    
    def get_parent(self) -> 'Directory':
        """Returns the parent directory.

        :return: The parent directory or self if the directory is the root directory.

        >>> root = Directory('/')
        >>> root.get_parent() is root
        True
        >>> dir1 = Directory('dir1', root)
        >>> dir1.get_parent() is root
        True
        >>> dir2 = Directory('dir2', dir1)
        >>> dir2.get_parent() is dir1
        True
        """
        return self._parent if self._parent is not None else self
    
    def get_child_directory(self, name: str) -> 'Directory':
        """Returns the child directory with the given name.

        :param name: The name of the child directory.
        :return: The child directory.
        :raises ValueError: If the directory does not have a child directory with the given name.

        >>> root = Directory('/')
        >>> root.get_child_directory('dir1')
        Traceback (most recent call last):
        ...
        ValueError: The directory does not have a child directory with the name "dir1".
        >>> dir1 = Directory('dir1', root)
        >>> root.get_child_directory('dir1') is dir1
        True
        """
        for child_directory in self._child_directories:
            if child_directory._name == name:
                return child_directory
        raise ValueError(f'The directory does not have a child directory with the name "{name}".')
    
    def is_root(self) -> bool:
        """Returns whether the directory is the root directory.

        :return: Whether the directory is the root directory.

        >>> root = Directory('/')
        >>> root.is_root()
        True
        >>> dir1 = Directory('dir1', root)
        >>> dir1.is_root()
        False
        """
        return self._parent is None
    
    def has_child_directory_with_name(self, directory: str) -> bool:
        """Returns whether the directory has a child directory with the given name.

        :param directory: The name of the directory to check.
        :return: Whether the directory has a child directory with the given name.

        >>> root = Directory('/')
        >>> root.has_child_directory_with_name('dir1')
        False
        >>> dir1 = Directory('dir1', root)
        >>> root.has_child_directory_with_name('dir1')
        True
        """
        for child_directory in self._child_directories:
            if child_directory._name == directory:
                return True
        return False
    
    def add_child_directory(self, name: str) -> 'Directory':
        """Adds a child directory with the given name to the directory.

        :param name: The name of the directory to add.
        :return: The added directory.
        :raises ValueError: If the directory already has a child directory with the given name.

        >>> root = Directory('/')
        >>> root.add_child_directory('dir1')
        /dir1
        >>> root.has_child_directory_with_name('dir1')
        True
        >>> root.add_child_directory('dir1')
        Traceback (most recent call last):
        ...
        ValueError: The directory already has a child directory with the name "dir1".
        """
        if self.has_child_directory_with_name(name):
            raise ValueError(f'The directory already has a child directory with the name "{name}".')
        directory: Directory = Directory(name, self)
        self._child_directories.append(directory)
        return directory

class File:
    """Represents a file in a file system."""

    def __init__(self, name: str, size: int, parent: 'Directory'):
        """Initializes a file with a name and a parent directory.

        :param name: The name of the file.
        :param size: The size of the file.
        :param parent: The parent directory.

        :raises ValueError: If the size is negative.
        """

        if size < 0:
            raise ValueError('The size of a file cannot be negative.')

        self._name: str = name
        self._size: int = size
        self._parent: Directory = parent
    
    def __str__(self) -> str:
        """Returns a string representation of the file."""
        return self._name
    
    def __repr__(self) -> str:
        """Returns a string representation of the file."""

        absolute_path: str = self._name
        directory: Optional[Directory] = self._parent
        while directory is not None:
            absolute_path = os.path.join(directory._name, absolute_path)
            directory = directory._parent
        return absolute_path
    
    def get_size(self) -> int:
        """Returns the size of the file.

        :return: The size of the file.

        >>> root = Directory('/')
        >>> file = File('file', 10, root)
        >>> file.get_size()
        10
        """
        return self._size


def parse_args() -> argparse.Namespace:
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        '-m', '--max-dir-size',
        type=int,
        default=0,
        help='The maximum size of a directory to include in the sum.'
    )

    parser.add_argument(
        '-i', '--input',
        type=argparse.FileType('r'),
        default=sys.stdin,
        help='The input file with terminal output.'
    )

    return parser.parse_args()


def parse_terminal_output(lines: List[str]) -> Directory:
    """Parse the terminal output to get the file system."""

    root: Directory = Directory('/')
    current_directory: Directory = root
    
    for line in lines:
        if line.startswith('$ '):
            command = line[2:].strip()
            if command.startswith('cd'):
                destination = command[3:].strip()
                if destination == '/':
                    current_directory = root
                elif destination == '..':
                    current_directory = current_directory.get_parent()
                else:
                    if current_directory.has_child_directory_with_name(destination):
                        current_directory = current_directory.get_child_directory(destination)
                    else:
                        current_directory = current_directory.add_child_directory(destination)
            elif command == 'ls':
                # TODO: Implement
                pass

    return root


def main() -> int:
    """Run the program."""
    args = parse_args()

    root = parse_terminal_output(args.input.readlines())

    return 0


if __name__ == '__main__':
    import doctest
    doctest.testmod()